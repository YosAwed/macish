ish for Linux/Windows ver. 2.01b1

MS系OSとUNIX系OSを行き来しているCUI版ishでございます。

石塚さん、他によるDOS版オリジナルish 2.01を、
takaさん、akiさんがUNIXに移植したish 2.01a4を、
毎黒仮節渡万さんがWIN32に再移植したものを、
Linux(64bit版を含む)に再々移植し、更に、Windows+MinGWでもコンパイル可
能にしたものです。

マルチボリュームishを使えば、送受信ファイルサイズに制限のあるメール
サーバにファイルを分割して送れます。MS-DOS時代のツールですが、まだま
だ現役？

UNIX版2.01a4 での主な追加機能
○マルチボリュームish対応
WIN32版2.01a4 での主な追加機能
○(シフトJIS) ロングファイル名対応
Linux版2.01b1 での主な追加機能
○(UTF8,EUC) ロングファイル名対応
○64bit OS対応

Linux版はソースファイルのみアーカイブされていますので、ご自身の環境に
合せてmakefileを書き換えてコンパイルしてください。
（デフォルトのmakefileは、UTF8環境を想定してあります）

Windows+MinGW上のgccでもコンパイル可能です。
コンパイルした exeファイル(32bit版)を同包してあります。

【ver. 2.01b1 での変更点詳細】
・WIN32版2.01a4で追加されたロングファイル名対応を、ファイル名にUTF8,
　EUCが含まれていた場合も正しく動作するように改造しました。
・上記に伴って、ishヘッダ中のOSコードを、"Linux"を意味するコードに
　変更しました。（このコードは、他のバージョンのishは認識しません。
　"不明なOS"と表示されます。）
・UNIX版2.01a4で追加されたマルチボリュームishが、64bit OS上でコンパ
　イルすると、正しくデコードできなかったのを修正しました。
・マルチボリュームエンコード時の出力ファイル名に、拡張子".ish"が含ま
　れる様に変更しました。
・マルチボリュームデコード時のテンポラリファイルの扱い方を修正しまし
　た（内部処理ですので、見かけ上は何も変りません）。
・-f=XXX オプションを、デコード時にも有効にしました。
・一部画面表示における2000年問題修正
・多数の環境を行き来して、コンパイルオプションが煩雑になってきたので
　Turbo-C, Borland-C など、現状販売されていないコンパイラ用のコードを
　削除し、Linux版, Windows版とも gcc でコンパイル可能になように書き改
　めました。
・上記のついでに、文法をC89相当の文法に書き改めました。
・これらの過程で、UNIX版2.01a5で行われたバグ修正も（ソースを大幅に書
　き換えたので、正確には対応が取れないけど…）反映されたはずです。
・添付されていたドキュメント類は、全てUTF8,LF改行に変換し、拡張子を
　".txt"に変更しました。
・UNIX版2.01a4 に添付されていた dispish は、移植するのが色々難儀でし
　たので、移植してありません。マルチボリュームデコード時に作成される
　テンポラリファイルの内部情報を表示するツールですので、デバッグする
　人以外は、関係ないですけど…。
　替りに、DISPISHマクロをdefine してコンパイルすると、マルチボリュー
　ムデコードのデバッグメッセージが追加表示されるようにしてあります。

【注意・制限事項】
・/f= オプションを使うと、任意のパスにファイルを出力できますが、パス
　の最大長は260バイトです。Windowsの制限そのままにして移植しましたの
　で、通常のLinuxツールより制限が厳しくなっています。
・ファイル名に漢字が含まれている場合も、正しく扱うようにはしてありま
　すが、コード変換はしません。異なる環境間でishファイルをやり取りする
　場合は、ファイル名に漢字を含めないことを推奨します。
・マルチボリューム分割の最大数は、99です。

●未だにEUCを使用しているLinux環境でコンパイルされる方へ
デフォルトの makefile のコンパイルオプション -DUTF8 を削除してコンパ
イルして下さい。

●MinGW上でコンパイルされる方へ
MinGW用の makefile は、デフォルトではコメントアウトしてあります。
コメントアウトを削除し、Linux用の makefile をコメントアウトしてコン
パイルして下さい。

●UNIX上でコンパイルを試される方へ
gcc が使用できる環境であれば、そのままコンパイル可能だろうと思います
が、デフォルトの makefile を使うと、ishヘッダ内のOSコードが"Linux"に
なります。
OSコードに"UNIX"を格納する実行ファイルを作りたい場合は、takaさん、aki
さんが書かれたUNIX用の makefile をコメントアウトした状態で残してあり
ますので、それらを参考にして makefile を再作成してコンパイルしてくだ
さい。
コメントアウトされているコンパイルオプションに、-DLONGNAME と、（多バ
イト文字にUTF8を使っている環境であれば）-DUTF8 を追加すれば、Linux版
相当のUNIX版ができる筈です。
但し、試したことはありませんので、悪しからず。
デフォルトのままコンパイルして、実行時オプションに常に -u を付けて実
行する、という手もありますけどね…

●「マルチボリュームish」の解説
（パソコン通信なんてやったことがないもんね…という人向け）
大きなファイルを送受信する際に、元ファイルを分割されたishファイルにエ
ンコードする方法です。
元々は、パソコン通信（インターネットぢゃないぞ）で、掲載行数に制限の
ある掲示板に、大きなファイルをアップロードする際に使用されていました。

昨今では、送受信ファイルサイズを制限しているメールサーバに大きなファ
イルを送らなければならない、という悲しい運命に陥った場合に応用できま
す。

　ish -s -mv800 OOOOO.XXX　　（800はishファイルの行数、81以上）

等でエンコードすると、800行毎に分割されたishファイル
　OOOOO.ish.#01
　OOOOO.ish.#02
　OOOOO.ish.#03
　　　：
ができます。これらをそれぞれ別々のメールにコピペして（添付すると、更
にBASE64エンコードされてサイズが大きくなりますので、本文コピベがお勧
め）送信すればOKです。
１行79バイト（Windows上でエンコードした場合は80バイト）ですので、メー
ルサーバの制限に合わせて行数を加減してください。

受信側は、全てのマルチボリュームishファイルをカレントディレクトリ（で
なくてもいいけど、そういう場合は、入力ファイル名にパスを付けてね）に入
れて、
　ish -r 0000.ish.#*
でデコードできます。

ちなみに、マルチボリュームishファイルが結合されてしまった場合も正しく
デコードできます。『結合される順番は問いません』ので、例えば、

　cat OOOOO.ish.#* > OOOOO.ish
　ish -r OOOOO.ish

などとやってもデコードできます。

ファイルの中にメール本文とか、MIMEヘッダとか、余分な行が混じっていて
も取り除く必要はありません。この辺は、"パソコン通信のログ"などという
余分な行が多数混じった中からデコードする事を想定して設計されているの
で、BASE64などの単純なテキストエンコードに比べると超便利です。

                                                2012/9/30 bko@bko.to
